/*
** FamiTracker - NES/Famicom sound tracker
** Copyright (C) 2005-2010  Jonathan Liss
**
** This program is free software; you can redistribute it and/or modify
** it under the terms of the GNU General Public License as published by
** the Free Software Foundation; either version 2 of the License, or
** (at your option) any later version.
**
** This program is distributed in the hope that it will be useful, 
** but WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU 
** Library General Public License for more details.  To obtain a 
** copy of the GNU Library General Public License, write to the Free 
** Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
**
** Any permitted reproduction of these routines, in whole or in part,
** must bear this legend.
*/

#pragma once

// The NSF driver binaries

// Change this for new versions
const char DRIVER_ID[] = "NSF-driver v2.4";

#pragma warning( disable : 4309 ) // disable warning 4309: 'initializing' : truncation of constant value

const unsigned short NSF_CALLER_SIZE = 128;	// bytes

// NES program for running a NSF
const char NSF_CALLER_BIN[] = {
	0x78,0xD8,0xAD,0x02,0x20,0x10,0xFB,0xAD,0x02,0x20,0x10,0xFB,0xA2,0x00,0x8A,0x9D,
	0x00,0x03,0xE8,0xD0,0xFA,0xA9,0x0F,0x8D,0x15,0x40,0xA9,0x0A,0x8D,0x10,0x40,0xA9,
	0x00,0xA2,0x00,0xA0,0x00,0x20,0x00,0x80,0xA9,0x80,0x8D,0x00,0x20,0xA9,0x00,0x8D,
	0x01,0x20,0x4C,0xB2,0xFF,0x20,0x03,0x80,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xB5,0xFF,0x80,0xFF,0xB8,0xFF
};

const char NSF_CALLER_BIN_VRC6[] = {
	0x78,0xD8,0xAD,0x02,0x20,0x10,0xFB,0xAD,0x02,0x20,0x10,0xFB,0xA2,0x00,0x8A,0x9D,
	0x00,0x03,0xE8,0xD0,0xFA,0xA9,0x00,0x8D,0x00,0x80,0xA9,0x02,0x8D,0x00,0xC0,0xA9,
	0x0F,0x8D,0x15,0x40,0xA9,0x0A,0x8D,0x10,0x40,0xA9,0x00,0xA2,0x00,0xA0,0x00,0x20,
	0x00,0x80,0xA9,0x80,0x8D,0x00,0x20,0xA9,0x00,0x8D,0x01,0x20,0x4C,0xBC,0xFF,0x20,
	0x03,0x80,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xBF,0xFF,0x80,0xFF,0xC2,0xFF
};

//
// The driver binaries
//
// created with a binary->c-array program

const unsigned int DRIVER1_LOCATION = 0xAC00;				// Define program starts
const unsigned int DRIVER2_LOCATION = 0x8000;

#define DRIVER_SIZE			(sizeof(DRIVER_MODE1))			// both mode 1 & 2 have the same size
#define DRIVER_SIZE_VRC6	(sizeof(DRIVER_VRC6))
#define DRIVER_SIZE_MMC5	(sizeof(DRIVER_MMC5))
#define DRIVER_SIZE_VRC7	(sizeof(DRIVER_VRC7))
#define DRIVER_SIZE_FDS		(sizeof(DRIVER_FDS))

// These are not covered by the GNU GPL license

// Mode 1, located @ DRIVER1_LOCATION
const char DRIVER_MODE1[] = {
	#include "drivers/drv_mode1.h"
};

// Mode 2, located @ $8000
const char DRIVER_MODE2[] = {
	#include "drivers/drv_mode2.h"
};

// VRC6 enabled
const char DRIVER_VRC6[] = {
	#include "drivers/drv_vrc6.h"
};

// MMC5 enabled
const char DRIVER_MMC5[] = {
	#include "drivers/drv_mmc5.h"
};

// VRC7 enabled
const char DRIVER_VRC7[] = {
	#include "drivers/drv_vrc7.h"
};

// FDS enabled
const char DRIVER_FDS[] = {
	#include "drivers/drv_fds.h"
};
